package main

import (
	"errors"
	"fmt"
	"go/parser"
	"go/token"
	"strings"
)

const (
	EnumCommentStart  = "Enum: "
	FieldCommentStart = "Field: "
	ValueCommentStart = "Value: "
	GeneratedMessage  = "Code generated by genum DO NOT EDIT"
)

func parseSource(sourceFilePath string) ([]EnumType, error) {
	parsedFile, err := parser.ParseFile(token.NewFileSet(), sourceFilePath, nil, parser.ParseComments)
	if err != nil {
		return nil, err
	}
	parsedEnums := make([]EnumType, 0)
	for _, comment := range parsedFile.Comments {
		enumType, err := commentToEnumType(comment.Text())
		if err != nil {
			fmt.Println(err.Error())
			continue
		}
		parsedEnums = append(parsedEnums, enumType)
	}

	return parsedEnums, nil
}

func commentToEnumType(comment string) (EnumType, error) {
	lines := strings.Split(comment, "\n")
	fmt.Println(lines)

	e := EnumType{
		fields:     make(FieldTypes, 0),
		enumValues: make(EnumValues, 0),
	}

	for i := 0; i < len(lines); i++ {
		if strings.HasPrefix(lines[i], EnumCommentStart) {
			enumName := strings.TrimPrefix(lines[i], EnumCommentStart)
			e.name = strings.ReplaceAll(enumName, " ", "")

			for j := i + 1; j < len(lines); j++ {
				if strings.HasPrefix(lines[j], FieldCommentStart) {
					field := strings.TrimPrefix(lines[j], FieldCommentStart)
					split := strings.Split(field, " -> ")
					if len(split) >= 2 {
						e.fields = append(e.fields, FieldType{
							Name: split[0],
							Type: split[1],
						})
					} else {
						return EnumType{}, errors.New("sd")
					}
				} else if strings.HasPrefix(lines[j], ValueCommentStart) {
					values := strings.TrimPrefix(lines[j], ValueCommentStart)
					split := strings.Split(values, " -> ")
					vals := split[1:]
					fieldLength := len(e.fields)
					filedVals := make([]FieldValue, 0)
					for k := 0; k < fieldLength; k++ {
						a, err := convert(e.fields[k].Type, vals[k])
						if err != nil {
							return e, err
						}
						filedVals = append(filedVals, FieldValue{
							Name:  e.fields[k].Name,
							Value: a,
						})
					}
					e.enumValues = append(e.enumValues, EnumValue{
						Name:   split[0],
						fields: filedVals,
					})
					fmt.Println(values, fieldLength, split)
				}
			}
		}
	}

	return e, nil
}
