package main

import (
	"flag"
	"fmt"
	"os"
	"path/filepath"

	"github.com/dave/jennifer/jen"
	"github.com/gertd/go-pluralize"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

var (
	titleCaser = cases.Title(language.English)
	lower      = cases.Lower(language.English)
	pul        = pluralize.NewClient()
)

func main() {
	source := flag.String("source", ".", "path of source file")
	destination := flag.String("destination", ".", "path of destination file")
	pkg := flag.String("package", "enums", "path of destination file")
	flag.Parse()
	if err := validate(source, destination, pkg); err != nil {
		fmt.Println(err.Error())
	}

	types := parseSource()

	content := generate(types, *pkg)

	if err := write(*destination, content); err != nil {
		fmt.Println(err.Error())
	}
}

func validate(source, destination, pkg *string) error {
	return nil
}

func parseSource() []EnumType {
	return []EnumType{
		{
			name: "country",
			fields: FieldTypes{
				{
					Name: "name",
					Type: "string",
				},
				{
					Name: "shorthand",
					Type: "string",
				},
				{
					Name: "continent",
					Type: "string",
				},
			},
			enumValues: []EnumValue{
				{
					Name: "TR",
					fields: FieldValues{
						{
							Name:  "name",
							Value: "Turkey",
						},
					},
				},
				{
					Name: "NL",
					fields: FieldValues{
						{
							Name:  "name",
							Value: "The Netherlands",
						},
					},
				},
				{
					Name: "JP",
					fields: FieldValues{
						{
							Name:  "name",
							Value: "Japan",
						},
					},
				},
			},
		},
	}
}

func generate(t []EnumType, pkg string) string {
	f := jen.NewFilePath(pkg)
	f.HeaderComment("Code generated by genum DO NOT EDIT")
	for _, enumType := range t {
		f.Add(enumType.toCode()...)
	}

	return f.GoString()
}

func write(destination, content string) error {
	if err := os.MkdirAll(filepath.Dir(destination), os.ModePerm); err != nil {
		return err
	}
	file, err := os.Create(destination)
	if err != nil {
		return err
	}
	if _, err := file.WriteString(content); err != nil {
		return err
	}

	return nil
}
